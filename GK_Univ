import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import TransferFunction, lsim

# Transfer function coefficients
num = [100]
den = [1,5,6]

# Define transfer function G(s)
G = TransferFunction(num, den)

# Time array
t = np.linspace(0,10,500)

# Create sinusoidal input
u = np.sin(t)

# Compute system response
t,y,_ = lsim(G, u, t)

# plotting
plt.figure(figsize=(10, 6))

# Input signal plot
plt.plot(t, u, label='Input (sinusoidal)', color='blue')

# Output signal plot
plt.plot(t, y, label='Output', color='red')

plt.title('Input & Output Over Time')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

plt.show()

import matplotlib.pyplot as plt
import numpy as np
from scipy import signal

# Define the system
s1 = signal.lti([100], [1, 5, 6 ]) # G(s) = 100/(s+2)(s+3))

# Define the frequency range
frequencies = np.logspace(-2, 2, 500) # frequencies

# Calculate frequency response
w, mag, phase = s1.bode(frequencies)

# Create Bode magnitude plot
plt.figure()
plt.subplot(2, 1, 1)
plt.semilogx(w, mag) # Bode magnitude plot
plt.title('Bode plot of G(s) = 100/(s+2)(s+3)')
plt.ylabel('Magnitude [dB]')

# Create Bode phase plot
plt.subplot(2, 1, 2)
plt.semilogx(w, phase) # Bode phase plot
plt.ylabel('Phase [degrees]')
plt.xlabel('Frequency [Hz]')
plt.show()